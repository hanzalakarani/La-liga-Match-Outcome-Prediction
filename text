### Explanation of the Project Codes

The project aims to predict the outcomes of La Liga football matches using machine learning. It involves two main phases: model building and deployment via a Streamlit app for predictions.

---

### **1. Data Preprocessing and Feature Engineering**

1. **Import Libraries and Load Dataset:**

```python
import pandas as pd
import joblib
```

- **Pandas**: A library used for data manipulation and analysis.
- **Joblib**: A tool used for saving and loading machine learning models.

```python
file_path = "C:/Users/USER/Desktop/laliga/new_laliga.csv"
data = pd.read_csv(file_path)
```
- Loads the dataset of La Liga matches from the specified file path.

---

2. **Data Exploration and Cleaning:**

```python
data.head()
data.info()
data['FTR'].value_counts()
data.describe()
```

- **Head()**: Displays the first 5 rows of the dataset.
- **Info()**: Provides the data types and missing values.
- **Value Counts**: Displays the frequency of match outcomes ('FTR').
- **Describe()**: Gives statistical details of numerical features.

---

3. **Convert Date and Handle Missing Values:**

```python
data['Date'] = pd.to_datetime(data['Date'], format='mixed')
missing_values = data.isnull().sum()
```

- Converts the 'Date' column to a proper `datetime` format.
- **Missing Values**: Checks for any missing data.

---

4. **Feature Scaling:**

```python
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
data[['HS', 'AS', 'HST', 'AST']] = scaler.fit_transform(data[['HS', 'AS', 'HST', 'AST']])
```

- Scales numerical columns ('HS', 'AS', 'HST', 'AST') to standardize them, ensuring consistent input for the model.

---

5. **Split Data and Feature Selection:**

```python
X = data.drop(labels=['FTR', 'Div', 'Date', 'HomeTeam', 'AwayTeam', 'HTR', 'HF', 'AF', 'HC', 'AC', 'HY', 'AY', 'HR', 'AR', 'HomePossessionProxy', 'AwayPossessionProxy', 'Outcome', 'HTHG', 'HTAG', 'FTHG', 'FTAG', 'GoalDifference'], axis=1)
y = data['FTR']
```

- Drops unnecessary columns that either cause data leakage or do not contribute to prediction.
- **X**: Independent features.
- **y**: Target feature ('FTR' - Full-time Result: H = Home Win, A = Away Win, D = Draw).

---

6. **Train-Test Split:**

```python
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
```

- Splits the data into training (70%) and testing (30%) sets to evaluate model performance.

---

### **2. Model Building**

1. **Model Training using Random Forest:**

```python
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
```

- **RandomForestClassifier**: A machine learning algorithm that builds multiple decision trees and merges them to get a more accurate and stable prediction.

2. **Grid Search for Hyperparameter Tuning:**

```python
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [10, 20, 30, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(estimator=rf_clf, param_grid=param_grid, cv=5, verbose=2, n_jobs=-1)
grid_search.fit(X_train, y_train)
```

- **GridSearchCV**: Performs an exhaustive search over specified hyperparameter values, using cross-validation (cv=5).

---

3. **Best Model and Evaluation:**

```python
best_rf = grid_search.best_estimator_
y_pred_best_rf = best_rf.predict(X_test)
```

- **best_rf**: Uses the model with the best hyperparameters to make predictions on the test data.

---

4. **Model Performance:**

```python
from sklearn.metrics import accuracy_score, classification_report
print("Optimized Random Forest Accuracy: ", accuracy_score(y_test, y_pred_best_rf))
print("Classification Report:\n", classification_report(y_test, y_pred_best_rf))
```

- **Accuracy Score**: Measures how well the model performed.
- **Classification Report**: Provides precision, recall, F1-score, and support.

---

5. **Saving the Model:**

```python
joblib.dump(best_rf, 'C:/Users/USER/Desktop/laliga/model.joblib')
```

- Saves the trained model using `joblib` for future use in predictions.

---

### **3. Deploying with Streamlit**

1. **Streamlit Interface:**

```python
import streamlit as st
import pandas as pd
import joblib

model = joblib.load('C:/Users/USER/Desktop/laliga/model.joblib')
team_stats = pd.read_csv('C:/Users/USER/Desktop/laliga/new_laliga.csv')
```

- Loads the trained model and the dataset into the Streamlit app for making predictions.

---

2. **Team Selection:**

```python
team_code_mapping = { ... }  # A dictionary that maps team codes to names

team_codes_df = pd.DataFrame(list(team_code_mapping.items()), columns=['Team Code', 'Team Name'])
home_team = st.selectbox("Select Home Team", team_codes_df['Team Name'])
away_team = st.selectbox("Select Away Team", team_codes_df['Team Name'])
```

- **Selectbox**: Creates dropdowns to select home and away teams for match prediction.

---

3. **Make Predictions:**

```python
if st.button("Predict Outcome"):
    home_team_stats = team_stats[team_stats['HT_Code'] == home_team_code].mean()
    away_team_stats = team_stats[team_stats['AT_Code'] == away_team_code].mean()

    input_data = pd.DataFrame({
        'HS': [home_team_stats['HS']],
        'AS': [away_team_stats['AS']],
        'HST': [home_team_stats['HST']],
        'AST': [away_team_stats['AST']],
        'HT_Code': [home_team_stats['HT_Code']],
        'AT_Code': [away_team_stats['AT_Code']],
        'HomeShotEfficiency': [home_team_stats['HomeShotEfficiency']],
        'AwayShotEfficiency': [away_team_stats['AwayShotEfficiency']],
        'total_goals': [home_team_stats['total_goals'] + away_team_stats['total_goals']]
    })

    result = model.predict(input_data)
```

- Gathers the necessary statistics for both teams and prepares them as input for the model.
- **Predict**: Uses the trained model to predict the match outcome based on the input features.

---

4. **Display Prediction:**

```python
if result[0] == 'H':
    st.write(f"Home Team Wins")
elif result[0] == 'A':
    st.write(f"Away Team Wins")
else:
    st.write(f"It's a Draw")
```

- Based on the prediction result, displays whether the home team wins, away team wins, or if it's a draw.

---

### Flowchart

```plaintext
Start
   |
Load Dataset → Data Preprocessing → Feature Engineering
   |                         ↓
   |               Train/Test Split
   |                         ↓
   |               Hyperparameter Tuning
   |                         ↓
   |            Best Model Selection and Training
   |                         ↓
   |                  Model Evaluation
   |                         ↓
Save Model  →        Streamlit Interface
   |                         ↓
   |                User Input (Select Teams)
   |                         ↓
   |              Prepare Input Features
   |                         ↓
   |            Model Prediction (Streamlit)
   |                         ↓
Display Outcome → End
```

---

### Architectural Diagram

```plaintext
                        +-------------------+
                        |                   |
                        |    CSV Dataset    |
                        |                   |
                        +---------+---------+
                                  |
                                  |
                         +--------v--------+
                         |                 |
                         |  Data Cleaning  |
                         |  Preprocessing  |
                         +--------+--------+
                                  |
                                  |
                   +--------------v--------------+
                   |                             |
                   |    Model Building (ML)      |
                   |    RandomForest Classifier  |
                   +--------------+--------------+
                                  |
                                  |
                        +---------v---------+
                        |                   |
                        |    Trained Model  |
                        |  (Joblib File)    |
                        +---------+---------+
                                  |
                                  |
                            +-----v-----+
                            |           |
                            | Streamlit |
                            |  App UI   |
                            +-----+-----+
                                  |
                            +-----v-----+
                            |  User Input|
                            +-----+-----+
                                  |
                            +-----v-----+
                            | Prediction |
                            +-----+-----+
                                  |
                           Display Outcome
```

